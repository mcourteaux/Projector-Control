/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package jprojectorcontrol.gui;

import java.awt.Toolkit;
import java.io.IOException;
import java.util.Stack;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;
import jprojectorcontrol.gui.ProjectorManager.Folder;
import jprojectorcontrol.projectors.Projector;
import org.apache.log4j.Logger;

/**
 *
 * @author martijncourteaux
 */
public class ProjectorManagerFrame extends javax.swing.JDialog
{

    private ProjectorManager man;
    private Folder selectedFolder;

    /**
     * Creates new form ProjectorManagerFrame
     */
    public ProjectorManagerFrame(java.awt.Frame parent, ProjectorManager man)
    {
        super(parent, true);
        this.man = man;
        initComponents();
        setLocationRelativeTo(parent);

        tree.setCellRenderer(new ProjectorTreeRenderer());
        tree.setModel(man.createTreeModel(false));

        cmbMoveTo.setRenderer(new ComboBoxTreeRenderer());
        listProjectors.setCellRenderer(new ProjectorListRenderer());
        updateMoveToModel();
        updateProjectorList();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        cmbList = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        tree = new javax.swing.JTree();
        btnAddFolder = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        listProjectors = new javax.swing.JList();
        btnSearchProjectors = new javax.swing.JButton();
        cmbMoveTo = new javax.swing.JComboBox();
        btnAddProjector = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Manage Projectors");

        jLabel1.setText("List:");

        tree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                treeValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(tree);

        btnAddFolder.setText("Add folder");
        btnAddFolder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddFolderActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        jScrollPane2.setViewportView(listProjectors);

        btnSearchProjectors.setText("Search Projectors");

        cmbMoveTo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Move to..." }));
        cmbMoveTo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbMoveToItemStateChanged(evt);
            }
        });

        btnAddProjector.setText("Add Projector");
        btnAddProjector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddProjectorActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(jLabel1)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(cmbList, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(btnSearchProjectors)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(btnAddProjector))
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                            .add(layout.createSequentialGroup()
                                .add(btnAddFolder, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 124, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .add(btnDelete, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 124, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 261, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 289, Short.MAX_VALUE)
                            .add(cmbMoveTo, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );

        layout.linkSize(new java.awt.Component[] {btnAddFolder, btnDelete}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(cmbList, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(btnSearchProjectors)
                    .add(btnAddProjector))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(btnAddFolder)
                    .add(btnDelete)
                    .add(cmbMoveTo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private DefaultMutableTreeNode getSelectedNode()
    {
        DefaultTreeModel dtm = (DefaultTreeModel) tree.getModel();
        DefaultMutableTreeNode node = (DefaultMutableTreeNode) dtm.getRoot();
        if (tree.getSelectionCount() == 1)
        {
            node = (DefaultMutableTreeNode) tree.getSelectionPath().getLastPathComponent();
        }
        return node;
    }

    private DefaultTreeModel getModel()
    {
        return (DefaultTreeModel) tree.getModel();
    }

    private void btnAddFolderActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnAddFolderActionPerformed
    {//GEN-HEADEREND:event_btnAddFolderActionPerformed
        DefaultMutableTreeNode node = getSelectedNode();

        if (node.getUserObject() instanceof Folder)
        {
            String name = JOptionPane.showInputDialog(btnAddFolder, "Give a name for the new folder.", "Create Folder", JOptionPane.PLAIN_MESSAGE);
            Folder fol = man.new Folder(name);
            Folder parent = (Folder) node.getUserObject();
            parent.addFolder(fol);

            DefaultTreeModel model = getModel();
            DefaultMutableTreeNode newNode = fol.createTreeNode(false);
            model.insertNodeInto(newNode, node, node.getChildCount());
            tree.expandPath(new TreePath(model.getPathToRoot(node)));
        }
    }//GEN-LAST:event_btnAddFolderActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnDeleteActionPerformed
    {//GEN-HEADEREND:event_btnDeleteActionPerformed
        DefaultMutableTreeNode node = getSelectedNode();
        if (!node.isRoot())
        {
            DefaultTreeModel model = getModel();
            if (node.getUserObject() instanceof Folder)
            {
                Folder fol = (Folder) node.getUserObject();
                fol.getParent().removeFolder(fol);
                model.removeNodeFromParent(node);
            } else if (node.getUserObject() instanceof Projector)
            {
                DefaultMutableTreeNode parentNode = ((DefaultMutableTreeNode) node.getParent());
                Projector proj = (Projector) node.getUserObject();
                Folder folder = (Folder) parentNode.getUserObject();
                folder.removeProjector(proj);
                model.removeNodeFromParent(node);
            }
        } else
        {
            Toolkit.getDefaultToolkit().beep();
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void cmbMoveToItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_cmbMoveToItemStateChanged
    {//GEN-HEADEREND:event_cmbMoveToItemStateChanged
        if (cmbMoveTo.getSelectedIndex() > 0 && selectedFolder != null)
        {
            Folder newFolder = (Folder) ((DefaultMutableTreeNode) cmbMoveTo.getSelectedItem()).getUserObject();
            DefaultListModel listModel = (DefaultListModel) listProjectors.getModel();
            ListSelectionModel selModel = listProjectors.getSelectionModel();
            for (int i = selModel.getMinSelectionIndex(); i <= selModel.getMaxSelectionIndex(); ++i)
            {
                if (selModel.isSelectedIndex(i))
                {
                    Projector proj = (Projector) listModel.get(i);
                    selectedFolder.removeProjector(proj);
                    newFolder.addProjector(proj);
                }
            }

            updateProjectorList();
            tree.repaint();
        } else if (cmbMoveTo.getSelectedIndex() > 0)
        {
            Toolkit.getDefaultToolkit().beep();
        }
        updateMoveToModel();
    }//GEN-LAST:event_cmbMoveToItemStateChanged

    private void treeValueChanged(javax.swing.event.TreeSelectionEvent evt)//GEN-FIRST:event_treeValueChanged
    {//GEN-HEADEREND:event_treeValueChanged
        selectedFolder = (Folder) ((DefaultMutableTreeNode) evt.getNewLeadSelectionPath().getLastPathComponent()).getUserObject();
        updateProjectorList();
    }//GEN-LAST:event_treeValueChanged

    private void btnAddProjectorActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnAddProjectorActionPerformed
    {//GEN-HEADEREND:event_btnAddProjectorActionPerformed
        if (selectedFolder == null)
        {
            Toolkit.getDefaultToolkit().beep();
            return;
        }

        AddProjectorDialog d = new AddProjectorDialog(this);
        d.setLocationRelativeTo(btnAddProjector);
        d.setVisible(true);
        if (!d.cancelled())
        {
            try
            {
                Projector p = man.createProjector(d.getProjectorModelClass().getName(), d.getProjectorConnectionPoint().toString(), d.getProjectorLocation());
                selectedFolder.addProjector(p);
                updateProjectorList();
                tree.repaint();
            } catch (IOException ex)
            {
                Logger.getLogger(ProjectorManagerFrame.class.getName()).error(null, ex);
            }
        }
    }//GEN-LAST:event_btnAddProjectorActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddFolder;
    private javax.swing.JButton btnAddProjector;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnSearchProjectors;
    private javax.swing.JComboBox cmbList;
    private javax.swing.JComboBox cmbMoveTo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList listProjectors;
    private javax.swing.JTree tree;
    // End of variables declaration//GEN-END:variables

    private void updateMoveToModel()
    {
        DefaultComboBoxModel cm = new DefaultComboBoxModel();
        cm.addElement("Move to...");
        Stack<DefaultMutableTreeNode> nodes = new Stack<DefaultMutableTreeNode>();
        DefaultTreeModel tm = getModel();
        nodes.push((DefaultMutableTreeNode) tm.getRoot());

        while (!nodes.empty())
        {
            DefaultMutableTreeNode node = nodes.pop();
            cm.addElement(node);
            for (int i = node.getChildCount() - 1; i >= 0; --i)
            {
                nodes.push((DefaultMutableTreeNode) node.getChildAt(i));
            }
        }
        cmbMoveTo.setModel(cm);
    }

    private void updateProjectorList()
    {
        DefaultListModel model = new DefaultListModel();
        if (tree.getSelectionCount() > 0)
        {
            model.ensureCapacity(selectedFolder.projectorCount());
            for (int i = 0; i < selectedFolder.projectorCount(); ++i)
            {
                model.addElement(selectedFolder.projectors.get(i));
            }
        }
        listProjectors.setModel(model);
    }
}
